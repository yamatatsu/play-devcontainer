/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `Tasks` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client";
import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model Tasks
 *
 */
export type TasksModel =
  runtime.Types.Result.DefaultSelection<Prisma.$TasksPayload>;

export type AggregateTasks = {
  _count: TasksCountAggregateOutputType | null;
  _min: TasksMinAggregateOutputType | null;
  _max: TasksMaxAggregateOutputType | null;
};

export type TasksMinAggregateOutputType = {
  userId: string | null;
  taskId: string | null;
  content: string | null;
  completedAt: Date | null;
  createdAt: Date | null;
  updatedAt: Date | null;
};

export type TasksMaxAggregateOutputType = {
  userId: string | null;
  taskId: string | null;
  content: string | null;
  completedAt: Date | null;
  createdAt: Date | null;
  updatedAt: Date | null;
};

export type TasksCountAggregateOutputType = {
  userId: number;
  taskId: number;
  content: number;
  completedAt: number;
  createdAt: number;
  updatedAt: number;
  _all: number;
};

export type TasksMinAggregateInputType = {
  userId?: true;
  taskId?: true;
  content?: true;
  completedAt?: true;
  createdAt?: true;
  updatedAt?: true;
};

export type TasksMaxAggregateInputType = {
  userId?: true;
  taskId?: true;
  content?: true;
  completedAt?: true;
  createdAt?: true;
  updatedAt?: true;
};

export type TasksCountAggregateInputType = {
  userId?: true;
  taskId?: true;
  content?: true;
  completedAt?: true;
  createdAt?: true;
  updatedAt?: true;
  _all?: true;
};

export type TasksAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Tasks to aggregate.
   */
  where?: Prisma.TasksWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Tasks to fetch.
   */
  orderBy?:
    | Prisma.TasksOrderByWithRelationInput
    | Prisma.TasksOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.TasksWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Tasks from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Tasks.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned Tasks
   **/
  _count?: true | TasksCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: TasksMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: TasksMaxAggregateInputType;
};

export type GetTasksAggregateType<T extends TasksAggregateArgs> = {
  [P in keyof T & keyof AggregateTasks]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTasks[P]>
    : Prisma.GetScalarType<T[P], AggregateTasks[P]>;
};

export type TasksGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.TasksWhereInput;
  orderBy?:
    | Prisma.TasksOrderByWithAggregationInput
    | Prisma.TasksOrderByWithAggregationInput[];
  by: Prisma.TasksScalarFieldEnum[] | Prisma.TasksScalarFieldEnum;
  having?: Prisma.TasksScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: TasksCountAggregateInputType | true;
  _min?: TasksMinAggregateInputType;
  _max?: TasksMaxAggregateInputType;
};

export type TasksGroupByOutputType = {
  userId: string;
  taskId: string;
  content: string;
  completedAt: Date | null;
  createdAt: Date;
  updatedAt: Date;
  _count: TasksCountAggregateOutputType | null;
  _min: TasksMinAggregateOutputType | null;
  _max: TasksMaxAggregateOutputType | null;
};

type GetTasksGroupByPayload<T extends TasksGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<TasksGroupByOutputType, T["by"]> & {
      [P in keyof T & keyof TasksGroupByOutputType]: P extends "_count"
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], TasksGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], TasksGroupByOutputType[P]>;
    }
  >
>;

export type TasksWhereInput = {
  AND?: Prisma.TasksWhereInput | Prisma.TasksWhereInput[];
  OR?: Prisma.TasksWhereInput[];
  NOT?: Prisma.TasksWhereInput | Prisma.TasksWhereInput[];
  userId?: Prisma.StringFilter<"Tasks"> | string;
  taskId?: Prisma.StringFilter<"Tasks"> | string;
  content?: Prisma.StringFilter<"Tasks"> | string;
  completedAt?: Prisma.DateTimeNullableFilter<"Tasks"> | Date | string | null;
  createdAt?: Prisma.DateTimeFilter<"Tasks"> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<"Tasks"> | Date | string;
};

export type TasksOrderByWithRelationInput = {
  userId?: Prisma.SortOrder;
  taskId?: Prisma.SortOrder;
  content?: Prisma.SortOrder;
  completedAt?: Prisma.SortOrderInput | Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type TasksWhereUniqueInput = Prisma.AtLeast<
  {
    userId_taskId?: Prisma.TasksUserIdTaskIdCompoundUniqueInput;
    AND?: Prisma.TasksWhereInput | Prisma.TasksWhereInput[];
    OR?: Prisma.TasksWhereInput[];
    NOT?: Prisma.TasksWhereInput | Prisma.TasksWhereInput[];
    userId?: Prisma.StringFilter<"Tasks"> | string;
    taskId?: Prisma.StringFilter<"Tasks"> | string;
    content?: Prisma.StringFilter<"Tasks"> | string;
    completedAt?: Prisma.DateTimeNullableFilter<"Tasks"> | Date | string | null;
    createdAt?: Prisma.DateTimeFilter<"Tasks"> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<"Tasks"> | Date | string;
  },
  "userId_taskId"
>;

export type TasksOrderByWithAggregationInput = {
  userId?: Prisma.SortOrder;
  taskId?: Prisma.SortOrder;
  content?: Prisma.SortOrder;
  completedAt?: Prisma.SortOrderInput | Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  _count?: Prisma.TasksCountOrderByAggregateInput;
  _max?: Prisma.TasksMaxOrderByAggregateInput;
  _min?: Prisma.TasksMinOrderByAggregateInput;
};

export type TasksScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.TasksScalarWhereWithAggregatesInput
    | Prisma.TasksScalarWhereWithAggregatesInput[];
  OR?: Prisma.TasksScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.TasksScalarWhereWithAggregatesInput
    | Prisma.TasksScalarWhereWithAggregatesInput[];
  userId?: Prisma.StringWithAggregatesFilter<"Tasks"> | string;
  taskId?: Prisma.StringWithAggregatesFilter<"Tasks"> | string;
  content?: Prisma.StringWithAggregatesFilter<"Tasks"> | string;
  completedAt?:
    | Prisma.DateTimeNullableWithAggregatesFilter<"Tasks">
    | Date
    | string
    | null;
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Tasks"> | Date | string;
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Tasks"> | Date | string;
};

export type TasksCreateInput = {
  userId: string;
  taskId?: string;
  content: string;
  completedAt?: Date | string | null;
  createdAt: Date | string;
  updatedAt: Date | string;
};

export type TasksUncheckedCreateInput = {
  userId: string;
  taskId?: string;
  content: string;
  completedAt?: Date | string | null;
  createdAt: Date | string;
  updatedAt: Date | string;
};

export type TasksUpdateInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  taskId?: Prisma.StringFieldUpdateOperationsInput | string;
  content?: Prisma.StringFieldUpdateOperationsInput | string;
  completedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type TasksUncheckedUpdateInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  taskId?: Prisma.StringFieldUpdateOperationsInput | string;
  content?: Prisma.StringFieldUpdateOperationsInput | string;
  completedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type TasksCreateManyInput = {
  userId: string;
  taskId?: string;
  content: string;
  completedAt?: Date | string | null;
  createdAt: Date | string;
  updatedAt: Date | string;
};

export type TasksUpdateManyMutationInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  taskId?: Prisma.StringFieldUpdateOperationsInput | string;
  content?: Prisma.StringFieldUpdateOperationsInput | string;
  completedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type TasksUncheckedUpdateManyInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  taskId?: Prisma.StringFieldUpdateOperationsInput | string;
  content?: Prisma.StringFieldUpdateOperationsInput | string;
  completedAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type TasksUserIdTaskIdCompoundUniqueInput = {
  userId: string;
  taskId: string;
};

export type TasksCountOrderByAggregateInput = {
  userId?: Prisma.SortOrder;
  taskId?: Prisma.SortOrder;
  content?: Prisma.SortOrder;
  completedAt?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type TasksMaxOrderByAggregateInput = {
  userId?: Prisma.SortOrder;
  taskId?: Prisma.SortOrder;
  content?: Prisma.SortOrder;
  completedAt?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type TasksMinOrderByAggregateInput = {
  userId?: Prisma.SortOrder;
  taskId?: Prisma.SortOrder;
  content?: Prisma.SortOrder;
  completedAt?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type StringFieldUpdateOperationsInput = {
  set?: string;
};

export type NullableDateTimeFieldUpdateOperationsInput = {
  set?: Date | string | null;
};

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string;
};

export type TasksSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    userId?: boolean;
    taskId?: boolean;
    content?: boolean;
    completedAt?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
  },
  ExtArgs["result"]["tasks"]
>;

export type TasksSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    userId?: boolean;
    taskId?: boolean;
    content?: boolean;
    completedAt?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
  },
  ExtArgs["result"]["tasks"]
>;

export type TasksSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    userId?: boolean;
    taskId?: boolean;
    content?: boolean;
    completedAt?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
  },
  ExtArgs["result"]["tasks"]
>;

export type TasksSelectScalar = {
  userId?: boolean;
  taskId?: boolean;
  content?: boolean;
  completedAt?: boolean;
  createdAt?: boolean;
  updatedAt?: boolean;
};

export type TasksOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  "userId" | "taskId" | "content" | "completedAt" | "createdAt" | "updatedAt",
  ExtArgs["result"]["tasks"]
>;

export type $TasksPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "Tasks";
  objects: {};
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      userId: string;
      taskId: string;
      content: string;
      completedAt: Date | null;
      createdAt: Date;
      updatedAt: Date;
    },
    ExtArgs["result"]["tasks"]
  >;
  composites: {};
};

export type TasksGetPayload<
  S extends boolean | null | undefined | TasksDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$TasksPayload, S>;

export type TasksCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<TasksFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: TasksCountAggregateInputType | true;
};

export interface TasksDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["Tasks"];
    meta: { name: "Tasks" };
  };
  /**
   * Find zero or one Tasks that matches the filter.
   * @param {TasksFindUniqueArgs} args - Arguments to find a Tasks
   * @example
   * // Get one Tasks
   * const tasks = await prisma.tasks.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends TasksFindUniqueArgs>(
    args: Prisma.SelectSubset<T, TasksFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__TasksClient<
    runtime.Types.Result.GetResult<
      Prisma.$TasksPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one Tasks that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {TasksFindUniqueOrThrowArgs} args - Arguments to find a Tasks
   * @example
   * // Get one Tasks
   * const tasks = await prisma.tasks.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends TasksFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, TasksFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__TasksClient<
    runtime.Types.Result.GetResult<
      Prisma.$TasksPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Tasks that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TasksFindFirstArgs} args - Arguments to find a Tasks
   * @example
   * // Get one Tasks
   * const tasks = await prisma.tasks.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends TasksFindFirstArgs>(
    args?: Prisma.SelectSubset<T, TasksFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__TasksClient<
    runtime.Types.Result.GetResult<
      Prisma.$TasksPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Tasks that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TasksFindFirstOrThrowArgs} args - Arguments to find a Tasks
   * @example
   * // Get one Tasks
   * const tasks = await prisma.tasks.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends TasksFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, TasksFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__TasksClient<
    runtime.Types.Result.GetResult<
      Prisma.$TasksPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more Tasks that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TasksFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Tasks
   * const tasks = await prisma.tasks.findMany()
   *
   * // Get first 10 Tasks
   * const tasks = await prisma.tasks.findMany({ take: 10 })
   *
   * // Only select the `userId`
   * const tasksWithUserIdOnly = await prisma.tasks.findMany({ select: { userId: true } })
   *
   */
  findMany<T extends TasksFindManyArgs>(
    args?: Prisma.SelectSubset<T, TasksFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$TasksPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a Tasks.
   * @param {TasksCreateArgs} args - Arguments to create a Tasks.
   * @example
   * // Create one Tasks
   * const Tasks = await prisma.tasks.create({
   *   data: {
   *     // ... data to create a Tasks
   *   }
   * })
   *
   */
  create<T extends TasksCreateArgs>(
    args: Prisma.SelectSubset<T, TasksCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__TasksClient<
    runtime.Types.Result.GetResult<
      Prisma.$TasksPayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many Tasks.
   * @param {TasksCreateManyArgs} args - Arguments to create many Tasks.
   * @example
   * // Create many Tasks
   * const tasks = await prisma.tasks.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends TasksCreateManyArgs>(
    args?: Prisma.SelectSubset<T, TasksCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many Tasks and returns the data saved in the database.
   * @param {TasksCreateManyAndReturnArgs} args - Arguments to create many Tasks.
   * @example
   * // Create many Tasks
   * const tasks = await prisma.tasks.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many Tasks and only return the `userId`
   * const tasksWithUserIdOnly = await prisma.tasks.createManyAndReturn({
   *   select: { userId: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends TasksCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, TasksCreateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$TasksPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a Tasks.
   * @param {TasksDeleteArgs} args - Arguments to delete one Tasks.
   * @example
   * // Delete one Tasks
   * const Tasks = await prisma.tasks.delete({
   *   where: {
   *     // ... filter to delete one Tasks
   *   }
   * })
   *
   */
  delete<T extends TasksDeleteArgs>(
    args: Prisma.SelectSubset<T, TasksDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__TasksClient<
    runtime.Types.Result.GetResult<
      Prisma.$TasksPayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one Tasks.
   * @param {TasksUpdateArgs} args - Arguments to update one Tasks.
   * @example
   * // Update one Tasks
   * const tasks = await prisma.tasks.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends TasksUpdateArgs>(
    args: Prisma.SelectSubset<T, TasksUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__TasksClient<
    runtime.Types.Result.GetResult<
      Prisma.$TasksPayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more Tasks.
   * @param {TasksDeleteManyArgs} args - Arguments to filter Tasks to delete.
   * @example
   * // Delete a few Tasks
   * const { count } = await prisma.tasks.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends TasksDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, TasksDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Tasks.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TasksUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Tasks
   * const tasks = await prisma.tasks.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends TasksUpdateManyArgs>(
    args: Prisma.SelectSubset<T, TasksUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Tasks and returns the data updated in the database.
   * @param {TasksUpdateManyAndReturnArgs} args - Arguments to update many Tasks.
   * @example
   * // Update many Tasks
   * const tasks = await prisma.tasks.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more Tasks and only return the `userId`
   * const tasksWithUserIdOnly = await prisma.tasks.updateManyAndReturn({
   *   select: { userId: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends TasksUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, TasksUpdateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$TasksPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one Tasks.
   * @param {TasksUpsertArgs} args - Arguments to update or create a Tasks.
   * @example
   * // Update or create a Tasks
   * const tasks = await prisma.tasks.upsert({
   *   create: {
   *     // ... data to create a Tasks
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Tasks we want to update
   *   }
   * })
   */
  upsert<T extends TasksUpsertArgs>(
    args: Prisma.SelectSubset<T, TasksUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__TasksClient<
    runtime.Types.Result.GetResult<
      Prisma.$TasksPayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of Tasks.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TasksCountArgs} args - Arguments to filter Tasks to count.
   * @example
   * // Count the number of Tasks
   * const count = await prisma.tasks.count({
   *   where: {
   *     // ... the filter for the Tasks we want to count
   *   }
   * })
   **/
  count<T extends TasksCountArgs>(
    args?: Prisma.Subset<T, TasksCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], TasksCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a Tasks.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TasksAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends TasksAggregateArgs>(
    args: Prisma.Subset<T, TasksAggregateArgs>,
  ): Prisma.PrismaPromise<GetTasksAggregateType<T>>;

  /**
   * Group by Tasks.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TasksGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends TasksGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: TasksGroupByArgs["orderBy"] }
      : { orderBy?: TasksGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    "Field ",
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, TasksGroupByArgs, OrderByArg> &
      InputErrors,
  ): {} extends InputErrors
    ? GetTasksGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the Tasks model
   */
  readonly fields: TasksFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Tasks.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TasksClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the Tasks model
 */
export interface TasksFieldRefs {
  readonly userId: Prisma.FieldRef<"Tasks", "String">;
  readonly taskId: Prisma.FieldRef<"Tasks", "String">;
  readonly content: Prisma.FieldRef<"Tasks", "String">;
  readonly completedAt: Prisma.FieldRef<"Tasks", "DateTime">;
  readonly createdAt: Prisma.FieldRef<"Tasks", "DateTime">;
  readonly updatedAt: Prisma.FieldRef<"Tasks", "DateTime">;
}

// Custom InputTypes
/**
 * Tasks findUnique
 */
export type TasksFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Tasks
   */
  select?: Prisma.TasksSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Tasks
   */
  omit?: Prisma.TasksOmit<ExtArgs> | null;
  /**
   * Filter, which Tasks to fetch.
   */
  where: Prisma.TasksWhereUniqueInput;
};

/**
 * Tasks findUniqueOrThrow
 */
export type TasksFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Tasks
   */
  select?: Prisma.TasksSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Tasks
   */
  omit?: Prisma.TasksOmit<ExtArgs> | null;
  /**
   * Filter, which Tasks to fetch.
   */
  where: Prisma.TasksWhereUniqueInput;
};

/**
 * Tasks findFirst
 */
export type TasksFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Tasks
   */
  select?: Prisma.TasksSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Tasks
   */
  omit?: Prisma.TasksOmit<ExtArgs> | null;
  /**
   * Filter, which Tasks to fetch.
   */
  where?: Prisma.TasksWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Tasks to fetch.
   */
  orderBy?:
    | Prisma.TasksOrderByWithRelationInput
    | Prisma.TasksOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Tasks.
   */
  cursor?: Prisma.TasksWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Tasks from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Tasks.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Tasks.
   */
  distinct?: Prisma.TasksScalarFieldEnum | Prisma.TasksScalarFieldEnum[];
};

/**
 * Tasks findFirstOrThrow
 */
export type TasksFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Tasks
   */
  select?: Prisma.TasksSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Tasks
   */
  omit?: Prisma.TasksOmit<ExtArgs> | null;
  /**
   * Filter, which Tasks to fetch.
   */
  where?: Prisma.TasksWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Tasks to fetch.
   */
  orderBy?:
    | Prisma.TasksOrderByWithRelationInput
    | Prisma.TasksOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Tasks.
   */
  cursor?: Prisma.TasksWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Tasks from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Tasks.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Tasks.
   */
  distinct?: Prisma.TasksScalarFieldEnum | Prisma.TasksScalarFieldEnum[];
};

/**
 * Tasks findMany
 */
export type TasksFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Tasks
   */
  select?: Prisma.TasksSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Tasks
   */
  omit?: Prisma.TasksOmit<ExtArgs> | null;
  /**
   * Filter, which Tasks to fetch.
   */
  where?: Prisma.TasksWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Tasks to fetch.
   */
  orderBy?:
    | Prisma.TasksOrderByWithRelationInput
    | Prisma.TasksOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing Tasks.
   */
  cursor?: Prisma.TasksWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Tasks from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Tasks.
   */
  skip?: number;
  distinct?: Prisma.TasksScalarFieldEnum | Prisma.TasksScalarFieldEnum[];
};

/**
 * Tasks create
 */
export type TasksCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Tasks
   */
  select?: Prisma.TasksSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Tasks
   */
  omit?: Prisma.TasksOmit<ExtArgs> | null;
  /**
   * The data needed to create a Tasks.
   */
  data: Prisma.XOR<Prisma.TasksCreateInput, Prisma.TasksUncheckedCreateInput>;
};

/**
 * Tasks createMany
 */
export type TasksCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many Tasks.
   */
  data: Prisma.TasksCreateManyInput | Prisma.TasksCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * Tasks createManyAndReturn
 */
export type TasksCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Tasks
   */
  select?: Prisma.TasksSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Tasks
   */
  omit?: Prisma.TasksOmit<ExtArgs> | null;
  /**
   * The data used to create many Tasks.
   */
  data: Prisma.TasksCreateManyInput | Prisma.TasksCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * Tasks update
 */
export type TasksUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Tasks
   */
  select?: Prisma.TasksSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Tasks
   */
  omit?: Prisma.TasksOmit<ExtArgs> | null;
  /**
   * The data needed to update a Tasks.
   */
  data: Prisma.XOR<Prisma.TasksUpdateInput, Prisma.TasksUncheckedUpdateInput>;
  /**
   * Choose, which Tasks to update.
   */
  where: Prisma.TasksWhereUniqueInput;
};

/**
 * Tasks updateMany
 */
export type TasksUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update Tasks.
   */
  data: Prisma.XOR<
    Prisma.TasksUpdateManyMutationInput,
    Prisma.TasksUncheckedUpdateManyInput
  >;
  /**
   * Filter which Tasks to update
   */
  where?: Prisma.TasksWhereInput;
  /**
   * Limit how many Tasks to update.
   */
  limit?: number;
};

/**
 * Tasks updateManyAndReturn
 */
export type TasksUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Tasks
   */
  select?: Prisma.TasksSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Tasks
   */
  omit?: Prisma.TasksOmit<ExtArgs> | null;
  /**
   * The data used to update Tasks.
   */
  data: Prisma.XOR<
    Prisma.TasksUpdateManyMutationInput,
    Prisma.TasksUncheckedUpdateManyInput
  >;
  /**
   * Filter which Tasks to update
   */
  where?: Prisma.TasksWhereInput;
  /**
   * Limit how many Tasks to update.
   */
  limit?: number;
};

/**
 * Tasks upsert
 */
export type TasksUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Tasks
   */
  select?: Prisma.TasksSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Tasks
   */
  omit?: Prisma.TasksOmit<ExtArgs> | null;
  /**
   * The filter to search for the Tasks to update in case it exists.
   */
  where: Prisma.TasksWhereUniqueInput;
  /**
   * In case the Tasks found by the `where` argument doesn't exist, create a new Tasks with this data.
   */
  create: Prisma.XOR<Prisma.TasksCreateInput, Prisma.TasksUncheckedCreateInput>;
  /**
   * In case the Tasks was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.TasksUpdateInput, Prisma.TasksUncheckedUpdateInput>;
};

/**
 * Tasks delete
 */
export type TasksDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Tasks
   */
  select?: Prisma.TasksSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Tasks
   */
  omit?: Prisma.TasksOmit<ExtArgs> | null;
  /**
   * Filter which Tasks to delete.
   */
  where: Prisma.TasksWhereUniqueInput;
};

/**
 * Tasks deleteMany
 */
export type TasksDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Tasks to delete
   */
  where?: Prisma.TasksWhereInput;
  /**
   * Limit how many Tasks to delete.
   */
  limit?: number;
};

/**
 * Tasks without action
 */
export type TasksDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Tasks
   */
  select?: Prisma.TasksSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Tasks
   */
  omit?: Prisma.TasksOmit<ExtArgs> | null;
};
